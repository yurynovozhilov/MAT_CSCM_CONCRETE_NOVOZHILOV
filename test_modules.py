#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ MAT_CSCM_CONCRETE_NOVOZHILOV
–î–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ venv312
"""

import sys
import os

def test_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"Python –ø—É—Ç—å: {sys.executable}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º venv
    if 'venv312' in sys.executable:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ venv312")
    else:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è venv312!")
        print("   –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: source activate.sh")
        return False
    return True

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    modules_to_test = [
        ('numpy', 'np'),
        ('matplotlib.pyplot', 'plt'),
        ('collections', None),
        ('CEB', None),
        ('CapModel', None),
        ('plotcurves', None),
        ('d3py', None),
        ('transformation', None)
    ]
    
    failed_imports = []
    
    for module_name, alias in modules_to_test:
        try:
            if alias:
                exec(f"import {module_name} as {alias}")
            else:
                exec(f"import {module_name}")
            print(f"‚úÖ {module_name}")
        except ImportError as e:
            print(f"‚ùå {module_name}: {e}")
            failed_imports.append(module_name)
    
    return len(failed_imports) == 0

def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        import numpy as np
        from CEB import CEB, DIF_c, DIF_t
        from CapModel import alpha, lamda, Q_2, TXC, TXE
        from d3py import CSCM
        
        # –¢–µ—Å—Ç CEB –º–æ–¥—É–ª—è
        f_c = 40.0
        data = CEB(f_c)
        print(f"‚úÖ CEB: f_c={data['f_c']}, f_t={data['f_t']:.2f}")
        
        # –¢–µ—Å—Ç DIF —Ñ—É–Ω–∫—Ü–∏–π
        dif_c = DIF_c(f_c)
        dif_t = DIF_t(f_c)
        print(f"‚úÖ DIF: compression shape={dif_c.shape}, tension shape={dif_t.shape}")
        
        # –¢–µ—Å—Ç CapModel —Ñ—É–Ω–∫—Ü–∏–π
        alpha_val = alpha(f_c, rev=3)
        lambda_val = lamda(f_c, rev=3)
        print(f"‚úÖ CapModel: alpha={alpha_val:.2f}, lambda={lambda_val:.2f}")
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Å –º–∞—Å—Å–∏–≤–∞–º–∏
        I = np.array([0, 10, 20])
        q2_vals = Q_2(f_c, I, rev=1)
        txc_vals = TXC(f_c, I, rev=1)
        txe_vals = TXE(f_c, I, rev=1)
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏: Q_2 shape={q2_vals.shape}")
        
        # –¢–µ—Å—Ç CSCM
        cscm_data = CSCM(f_c=f_c)
        print(f"‚úÖ CSCM: MID={cscm_data['MID']['value']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_notebook_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ notebook"""
    print("\nüìì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π notebook...")
    
    try:
        import numpy as np
        from CapModel import Q_2, TXC, TXE
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ notebook
        def Q1MC(f_c, I, rev=1):
            return np.sqrt(3)*Q_2(f_c,I,rev)/(1+Q_2(f_c, I, rev))

        def Q2MC(f_c, I, rev=1):
            return TXE(f_c, I, rev)/TXC(f_c, I, rev)

        def Q1WW(f_c, I, rev=1):
            q=(1-pow(Q_2(f_c, I, rev),2))
            return (np.sqrt(3)*q+(2*Q_2(f_c, I, rev)-1)*np.sqrt((3*q)+5*pow(Q_2(f_c, I, rev),2)-4*Q_2(f_c, I, rev)))/(3*q+pow(1-2*Q_2(f_c, I, rev),2))
        
        f_c = 40
        I = np.array([0, 10, 20])
        
        q1mc_result = Q1MC(f_c, I, rev=1)
        q2mc_result = Q2MC(f_c, I, rev=1)
        q1ww_result = Q1WW(f_c, I, rev=1)
        
        print(f"‚úÖ Q1MC: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω")
        print(f"‚úÖ Q2MC: shape={q2mc_result.shape}")
        print(f"‚úÖ Q1WW: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö notebook: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ MAT_CSCM_CONCRETE_NOVOZHILOV")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not test_environment():
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    imports_ok = test_imports()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    functionality_ok = test_basic_functionality()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ notebook
    notebook_ok = test_notebook_functions()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ò–º–ø–æ—Ä—Ç—ã: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if imports_ok else '‚ùå –û–®–ò–ë–ö–ò'}")
    print(f"   –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if functionality_ok else '‚ùå –û–®–ò–ë–ö–ò'}")
    print(f"   –§—É–Ω–∫—Ü–∏–∏ notebook: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if notebook_ok else '‚ùå –û–®–ò–ë–ö–ò'}")
    
    if imports_ok and functionality_ok and notebook_ok:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    sys.exit(main())